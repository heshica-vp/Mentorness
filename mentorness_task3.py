# -*- coding: utf-8 -*-
"""Mentorness_task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s9Jhi6MbzWexefH0gO6ZquTAI6ObyylE
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import Ridge, Lasso, ElasticNet
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = '/content/drive/MyDrive/Task_3/Dataset.csv'
data = pd.read_csv(file_path)

# Feature selection: Exclude non-informative features
features = data.drop(['Restaurant ID', 'Restaurant Name', 'Aggregate rating',
                      'Rating color', 'Rating text', 'Votes', 'Address', 'Locality Verbose'], axis=1)
target = data['Aggregate rating']

# Encoding categorical variables
le = LabelEncoder()
features['Country Code'] = le.fit_transform(features['Country Code'])
features['City'] = le.fit_transform(features['City'])
features['Locality'] = le.fit_transform(features['Locality'])
features['Cuisines'] = le.fit_transform(features['Cuisines'])
features['Currency'] = le.fit_transform(features['Currency'])
features['Has Table booking'] = le.fit_transform(features['Has Table booking'])
features['Has Online delivery'] = le.fit_transform(features['Has Online delivery'])
features['Is delivering now'] = le.fit_transform(features['Is delivering now'])
features['Switch to order menu'] = le.fit_transform(features['Switch to order menu'])

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# List of models to evaluate
models = {
    "K-Nearest Neighbors": KNeighborsRegressor(),
    "Ridge Regression": Ridge(),
    "Lasso Regression": Lasso(),
    "ElasticNet Regression": ElasticNet(),
    "XGBoost Regressor": XGBRegressor(random_state=42)
}

# Evaluate each model
results = {}

for model_name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # Store the results
    results[model_name] = {'Mean Squared Error': mse, 'R-Squared': r2}

# Display the results
for model_name, metrics in results.items():
    print(f"Model: {model_name}")
    print(f"Mean Squared Error: {metrics['Mean Squared Error']}")
    print(f"R-Squared: {metrics['R-Squared']}")
    print("-" * 30)

from google.colab import drive
drive.mount('/content/drive')